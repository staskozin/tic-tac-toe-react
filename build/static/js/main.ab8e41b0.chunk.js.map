{"version":3,"sources":["Square.js","Board.js","Game.js","index.js"],"names":["Square","props","className","onClick","value","Board","i","this","squares","key","rows","index","m","winCombination","includes","push","renderSquare","renderRows","React","Component","Game","state","history","Array","fill","isMovesListReversed","stepNumber","xIsNext","slice","length","calculateWinner","setState","concat","step","status","current","win","winner","moves","map","move","desc","1","2","3","Math","floor","jumpTo","reverse","handleClick","onChange","handleMovesListCheckbox","type","lines","a","b","c","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ab8e41b0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Square (props) {\r\n  return (\r\n    <button className={'square ' + props.className} onClick={props.onClick}>\r\n      {props.value}\r\n    </button>\r\n  )\r\n}\r\n\r\nexport default Square\r\n","import React from 'react'\r\n\r\nimport Square from './Square'\r\n\r\nclass Board extends React.Component {\r\n  renderSquare (i, className) {\r\n    return <Square \r\n              value={this.props.squares[i]}\r\n              onClick={() => this.props.onClick(i)}\r\n              key={i}\r\n              className={className}\r\n           />\r\n  }\r\n\r\n  renderRows () {\r\n    let rows = []\r\n    let index = 0\r\n    for (let i = 0; i < 3; i++) {\r\n      let squares = []\r\n      for (const m = index + 3; index < m; index++) {\r\n        let className = this.props.winCombination && this.props.winCombination.includes(index) ? 'square-win' : null\r\n        squares.push(this.renderSquare(index, className))\r\n      }\r\n    rows.push(<div key={i} className=\"board-row\"><div className=\"index index_ver\">{i+1}</div>{squares}</div>)\r\n    }\r\n    return rows\r\n  }\r\n\r\n  render () {\r\n    return (\r\n      <div>\r\n        {this.renderRows()}\r\n        <div className=\"board-row_index\">\r\n          <div className=\"index\">A</div>\r\n          <div className=\"index\">B</div>\r\n          <div className=\"index\">C</div>\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nexport default Board\r\n","import React from 'react'\r\n\r\nimport Board from './Board'\r\n\r\nclass Game extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null),\r\n          index: 0\r\n        }\r\n      ],\r\n      isMovesListReversed: false,\r\n      stepNumber: 0,\r\n      xIsNext: true\r\n    }\r\n  }\r\n\r\n  handleClick (i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1)\r\n    const current = history[history.length - 1]\r\n    const squares = current.squares.slice()\r\n\r\n    if (calculateWinner(squares) || squares[i]) {\r\n      return\r\n    }\r\n    squares[i] = this.state.xIsNext ? 'X' : 'O'\r\n    this.setState({\r\n      history: history.concat([{\r\n        squares: squares,\r\n        index: i\r\n      }]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext\r\n    })\r\n  }\r\n\r\n  handleMovesListCheckbox () {\r\n    this.setState({\r\n      isMovesListReversed: !this.state.isMovesListReversed\r\n    })\r\n  }\r\n\r\n  jumpTo (step) {\r\n    this.setState({\r\n      stepNumber: step,\r\n      xIsNext: (step % 2) === 0,\r\n    });\r\n  }\r\n\r\n  render () {\r\n    const history = this.state.history\r\n    const current = history[this.state.stepNumber]\r\n    const win = calculateWinner(current.squares.slice())\r\n    const [winner, winCombination] = win ? win : [null, null]\r\n\r\n    const moves = history.map((step, move) => {\r\n      const desc = move ? 'Jump to move #' + move + ' (' + getCoordsFromSquare(step.index) + ')' : 'Jump to start'\r\n      const className = move === this.state.stepNumber ? 'current-move' : ''\r\n      return (\r\n        <li key={move} className={className}>\r\n          <button onClick={() => this.jumpTo(move)}>{desc}</button>\r\n        </li>\r\n      )\r\n    })\r\n    if (this.state.isMovesListReversed)\r\n      moves.reverse()\r\n\r\n    let status\r\n    if (winner)\r\n      status = winner + ' wins'\r\n    else if (this.state.stepNumber >= 9)\r\n      status = 'Draw'\r\n    else\r\n      status = 'Next player: ' + (this.state.xIsNext ? 'X' : 'O');\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={(i) => this.handleClick(i)}\r\n            winCombination={winCombination}\r\n          />\r\n        </div>\r\n        <div className=\"game-info\">\r\n          <div>{status}</div>\r\n          <label>\r\n            <input onChange={() => this.handleMovesListCheckbox()} type=\"checkbox\" />\r\n            Reverse moves list\r\n          </label>\r\n          \r\n          <ul className=\"moves-list\">{moves}</ul>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game\r\n\r\nfunction calculateWinner (squares) {\r\n  const lines = [\r\n    [0, 1, 2],\r\n    [3, 4, 5],\r\n    [6, 7, 8],\r\n    [0, 3, 6],\r\n    [1, 4, 7],\r\n    [2, 5, 8],\r\n    [0, 4, 8],\r\n    [2, 4, 6],\r\n  ]\r\n  for (let i = 0; i < lines.length; i++) {\r\n    const [a, b, c] = lines[i]\r\n    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n      return [squares[a], lines[i]]\r\n    }\r\n  }\r\n  return null\r\n}\r\n\r\nfunction getCoordsFromSquare(i) {\r\n  const letters = {\r\n    1: 'A',\r\n    2: 'B',\r\n    3: 'C'\r\n  }\r\n  return letters[i % 3 + 1] + (Math.floor(i / 3) + 1)\r\n}\r\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css';\n\nimport Game from './Game'\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}